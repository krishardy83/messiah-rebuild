---
import type { HTMLAttributes } from "astro/types";
import { cn } from "../lib/utils";
import Icon from "./icon.astro";

interface Props extends HTMLAttributes<"section"> {
  title: string;
}

const { title, class: className, ...props } = Astro.props;
---

<section
  data-analytics="event-list"
  {...props}
  class={cn("@container not-prose border border-gray-300 bg-gray-100", className)}
  x-data="{
    events: [],
    loading: true,
    error: null,
    filters: {
      categories: [],
      calendars: [],
      limit: 3,
    },

    init() {
      fetch('https://www.messiah.edu/events/_data/all-events.json')
        .then((response) => response.json())
        .then((data) => {
          this.events = data.items.filter((item) => {
            const { categories, calendars } = this.filters;
            
            const matchesCategory = categories.length === 0 || item.category.some((category) => categories.includes(category));
            const matchesCalendar = calendars.length === 0 || item.calendars.some((calendar) => calendars.includes(calendar));

            return matchesCategory && matchesCalendar;
          });
          this.loading = false;
        })
        .catch((error) => {
          this.error = `Could not fetch event list. (${error.message})`;
          this.loading = false;
        });
    },

    getDate(timestring) {
      const date = timestring ? new Date(timestring) : new Date();
      
      date.setHours(0);
      date.setMinutes(0);
      date.setSeconds(0, 0);
      
      return date;
    },

    transformEvent(event, date) {
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dez'];
      
      return {
        title: event.title,
        url: event.url,
        month: months[date.getMonth()],
        day: date.getDate(),
        date: new Date(`${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`),
      };
    },

    getNextViableEvent(event) {
      const today = this.getDate();
      const dayMap = {
        Sunday: 0,
        Monday: 1,
        Tuesday: 2,
        Wednesday: 3,
        Thursday: 4,
        Friday: 5,
        Saturday: 6,
      };
      
      if (event.repeat === 'Daily') {
        return this.transformEvent(event, today);
      } else {
        const startDate = this.getDate(event.date);
        const endDate = this.getDate(event.repeatEnd);
        const repeatDays = event.repeatDays.map(day => dayMap[day]);
        let date = new Date(Math.max(today, startDate));

        while (date <= endDate) {
          if (repeatDays.includes(date.getDay())) {
            return this.transformEvent(event, date);
          }

          date.setDate(date.getDate() + 1);
        }
      }
    },

    sortEventsByDate(events) {
      return events.sort((a, b) => a.date.getTime() - b.date.getTime());
    },

    getCurrentEvents() {
      const today = this.getDate();
      const results = [];

      for (const event of this.events) {
        if (event.repeat === 'No repeat') {
          const start = this.getDate(event.date);
          
          if (today.getTime() <= start.getTime()) {
            results.push(this.transformEvent(event, start));
          }
        } else {
          const end = this.getDate(event.repeatEnd);
          
          if (today.getTime() <= end.getTime()) {
            results.push(this.getNextViableEvent(event));
          }
        }
      }
      
      return this.sortEventsByDate(results).slice(0, this.filters.limit);
    },
  }"
>
  <div class="p-4
  @md:p-8">
    <h3 class="mb-4 h4 text-primary-800">{title}</h3>

    <template x-if="loading">
      <div
        role="alert"
        class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
      >
        <p>Loading event list...</p>
      </div>
    </template>

    <template x-if="error">
      <div role="alert" class="text-red-600 border border-red-200 bg-red-50 py-2 px-4">
        <p class="mb-2">Snap! Something went wrong. Please refresh the page or try again later.</p>
        <code x-text="error" class="text-sm leading-none"></code>
      </div>
    </template>

    <template x-if="events.length === 0 && !loading && !error">
      <p>No upcoming events, check back later.</p>
    </template>

    <ul class="space-y-2 @md:space-y-4">
      <template x-for="event in getCurrentEvents()">
        <li class="p-4 bg-white shadow-md w-full flex items-center gap-4 relative group">
          <time
            datetime="2012"
            class="bg-gray-800 uppercase font-title font-bold text-white w-12 text-center aspect-square leading-none flex flex-col items-center justify-center group-hover:bg-primary-700 transition-colors flex-shrink-0"
          >
            <span x-text="event.month"></span>
            <span x-text="event.day"></span>
          </time>
          <a
            :href="event.url"
            class="after:absolute after:inset-0 @md:text-lg leading-tight group-hover:text-tertiary-400 transition-colors"
            x-text="event.title"></a>
          <Icon name="chevron-right" class="ml-auto size-5 hidden @md:block" />
        </li>
      </template>
    </ul>
  </div>
</section>
