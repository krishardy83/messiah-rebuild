---
import type { HTMLAttributes } from "astro/types";
import { cn } from "../lib/utils";
import Icon from "./icon.astro";

interface Props extends HTMLAttributes<"div"> {
  title: string;
}

const { title, class: className, ...props } = Astro.props;
---

<div
  data-analytics="featured-event-list"
  {...props}
  class={cn("@container not-prose", className)}
  x-data="{
    events: [],
    loading: true,
    error: null,

    searchEnabled: true,
    filterEnabled: true,

    filters: {
      categories: [],
      calendars: [],
      limit: 3,
      query: '',
      category: '',
    },

    init() {
      fetch('https://www.messiah.edu/events/_data/all-events.json')
        .then((response) => response.json())
        .then((data) => {
          const { categories, calendars } = this.filters;
        
          this.events = data.items.filter((item) => {
            const matchesCategory = categories.length === 0 || item.category.some((category) => categories.includes(category));
            const matchesCalendar = calendars.length === 0 || item.calendars.some((calendar) => calendars.includes(calendar));

            return matchesCategory && matchesCalendar;
          });
          this.loading = false;
        })
        .catch((error) => {
          this.error = `Could not fetch event list. (${error.message})`;
          this.loading = false;
        });
    },

    getDate(timestring) {
      const date = timestring ? new Date(timestring) : new Date();
      
      date.setHours(0);
      date.setMinutes(0);
      date.setSeconds(0, 0);
      
      return date;
    },

    transformEvent(event, date) {
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      
      return {
        title: event.title,
        url: event.url,
        month: months[date.getMonth()],
        summary: event.summary,
        image: event.thumb,
        day: date.getDate(),
        time: event.start,
        date: new Date(`${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`),
        categories: event.category,
      };
    },

    getNextViableEvent(event) {
      const today = this.getDate();
      const dayMap = {
        Sunday: 0,
        Monday: 1,
        Tuesday: 2,
        Wednesday: 3,
        Thursday: 4,
        Friday: 5,
        Saturday: 6,
      };
      
      if (event.repeat === 'Daily') {
        return this.transformEvent(event, today);
      } else {
        const startDate = this.getDate(event.date);
        const endDate = this.getDate(event.repeatEnd);
        const repeatDays = event.repeatDays.map(day => dayMap[day]);
        let date = new Date(Math.max(today, startDate));

        while (date <= endDate) {
          if (repeatDays.includes(date.getDay())) {
            return this.transformEvent(event, date);
          }

          date.setDate(date.getDate() + 1);
        }
      }
    },

    sortEventsByDate(events) {
      return events.sort((a, b) => a.date.getTime() - b.date.getTime());
    },

    filterEvents(events) {
      const { category, query } = this.filters;

      return events.filter((event) => {
        const matchesTitle = event.title.toLowerCase().includes(query.toLowerCase());
        const matchesSummary = event.summary.toLowerCase().includes(query.toLowerCase());
        
        const matchesCategory = category ? event.categories.includes(category) : true;

        return (matchesTitle || matchesSummary) && matchesCategory;
      });
    },

    getEventCategories() {
      const categories = new Set();
      
      for (const event of this.getCurrentEvents()) {
        event.categories.forEach((category) => {
          if (category) {
            categories.add(category)
          }
        });
      }
      
      return Array.from(categories);
    },

    getCurrentEvents() {
      const today = this.getDate();
      const results = [];

      for (const event of this.events) {
        if (event.repeat === 'No repeat') {
          const start = this.getDate(event.date);
          
          if (today.getTime() <= start.getTime()) {
            results.push(this.transformEvent(event, start));
          }
        } else {
          const end = this.getDate(event.repeatEnd);
          
          if (today.getTime() <= end.getTime()) {
            results.push(this.getNextViableEvent(event));
          }
        }
      }
      
      return this.sortEventsByDate(results).slice(0, this.filters.limit);
    },

    getSummary(summary) {
      const words = summary.split(' ');

      if (words.length > 10) {
        return words.slice(0, 10).join(' ') + '...';
      } else {
        return summary;
      }
    },

    getFilteredEvents() {
      return this.filterEvents(this.sortEventsByDate(this.getCurrentEvents()));
    },

    resetFilters() {
      this.filters.category = '';
      this.filters.query = '';
    }
  }"
>
  <h3 class="mb-4 h4 text-primary-800">{title}</h3>

  <div class="flex flex-col sm:flex-row gap-4 mb-8" x-show="searchEnabled || filterEnabled">
    <select
      class="bg-white min-h-12 px-4 border border-gray-300 sm:w-1/2 select"
      x-model="filters.category"
      x-show="filterEnabled"
    >
      <option value="">All categories</option>
      <template x-for="category in getEventCategories()">
        <option :value="category" x-text="category"></option>
      </template>
    </select>

    <div class="relative sm:w-1/2" x-show="searchEnabled">
      <Icon name="search" class="absolute top-1/2 left-4 -translate-y-1/2 text-gray-400" />
      <input
        type="text"
        x-model="filters.query"
        autocomplete="off"
        placeholder="Search by title or summary"
        aria-label="Search by title or summary"
        class="bg-white w-full min-h-12 px-4 pl-12 border border-gray-300"
      />
      <button
        type="button"
        title="Clear input"
        x-show="filters.query.length > 0"
        @click="filters.query = ''"
        class="absolute top-1/2 right-4 -translate-y-1/2 text-gray-400 cursor-pointer"
        style="display: none;"
      >
        <Icon name="close" class="size-5 shrink-0" />
      </button>
    </div>
  </div>

  <template x-if="loading">
    <div
      role="alert"
      class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
    >
      <p>Loading event list...</p>
    </div>
  </template>

  <template x-if="error">
    <div role="alert" class="text-red-600 border border-red-200 bg-red-50 py-2 px-4">
      <p class="mb-2">Snap! Something went wrong. Please refresh the page or try again later.</p>
      <code x-text="error" class="text-sm leading-none"></code>
    </div>
  </template>

  <template x-if="events.length === 0 && !loading && !error">
    <p class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2">
      No upcoming events, check back later.
    </p>
  </template>

  <template x-if="getFilteredEvents().length === 0 && !loading && !error">
    <p class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2">
      No events match your filter or search. <button
        type="button"
        @click="resetFilters"
        class="hover:underline">Reset</button
      >
    </p>
  </template>

  <div class="flex flex-col gap-8">
    <template x-for="event in getFilteredEvents()">
      <article
        class="flex flex-col @md:flex-row gap-8 border-b border-gray-200 pb-8 last-of-type:border-b-0 last-of-type:pb-0"
      >
        <figure class="@md:w-1/3">
          <img
            :src="event.image"
            x-show="event.image"
            :alt="event.title"
            class="h-full object-cover"
          />
        </figure>

        <div class="@md:w-2/3 relative @md:pr-28">
          <time
            datetime="2012"
            class="bg-primary-800 uppercase font-title px-6 py-1 font-bold text-white leading-none flex flex-col items-center mb-4 justify-center @md:absolute right-0 top-0 w-24"
          >
            <span x-text="event.month"></span>
            <span class="text-3xl" x-text="event.day"></span>
            <span x-text="event.time"></span>
          </time>

          <h4
            class="font-title mb-1 uppercase text-xl font-bold text-primary-800"
            x-text="event.title"
          >
          </h4>

          <p class="leading-snug" x-text="getSummary(event.summary)"></p>

          <a :href="event.url" class="btn-tertiary mt-4">Read more</a>
        </div>
      </article>
    </template>
  </div>
</div>
