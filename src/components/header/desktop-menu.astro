---
import Alert from "../alert.astro";
import Icon from "../icon.astro";
import Logo from "../logo.astro";
import { bottomGroups, topGroups } from "./navigation-data";
import { slugify } from "../../lib/utils";

interface Props {
  transparent: boolean;
}

const { transparent } = Astro.props;
---

<Alert />

<div
  data-menu
  class="group sticky -top-px z-30 border-b border-transparent pb-2 pt-6 transition-all before:absolute before:top-0 before:h-2 before:w-full before:bg-gradient-to-r before:from-primary-600 before:to-secondary-600 lg:pb-6 lg:pt-4 lg:before:h-4 lg:data-[compress='true']:-translate-y-12 lg:data-[scrolling='true']:border-gray-300 lg:data-[scrolling='true']:bg-white"
>
  <header class="mx-auto max-w-6xl px-4">
    <nav class="flex flex-wrap items-end" data-analytics="navigation">
      <a
        href="/"
        aria-label="home page"
        class:list={[
          "slate-hidden mr-auto mt-4 transition-opacity group-data-[compress='true']:opacity-0 lg:block",
          transparent
            ? "text-white transition-colors group-data-[scrolling='true']:text-primary-800"
            : "text-primary-800",
        ]}
      >
        <Logo />
      </a>

      <div class="slate-hidden grow flex-col justify-end transition-opacity lg:flex">
        <ul
          class="mb-4 flex items-center justify-end leading-none transition-opacity group-data-[compress='true']:opacity-0"
        >
          {
            topGroups.map((group) => (
              <li class="relative">
                <button
                  type="button"
                  id={`group-button-${slugify(group.title)}`}
                  aria-controls={`group-${slugify(group.title)}`}
                  aria-expanded="false"
                  aria-haspopup="true"
                  class:list={[
                    "group flex items-center gap-x-2 px-4 py-3 text-xs uppercase transition-colors hover:text-tertiary-400 aria-expanded:bg-primary-800 aria-expanded:text-white group-data-[scrolling='true']:aria-expanded:text-white xl:text-sm",
                    transparent
                      ? "text-white group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400"
                      : "text-primary-800",
                  ]}
                >
                  {group.title}

                  <Icon
                    name="chevron-down"
                    class="pointer-events-none size-4 transition-transform group-aria-expanded:rotate-180"
                  />
                </button>

                <div
                  aria-labelledby={`group-button-${slugify(group.title)}`}
                  aria-hidden="true"
                  id={`group-${slugify(group.title)}`}
                  class="slate-hidden absolute right-0 z-10 w-72 bg-primary-800 p-8 text-white opacity-0 transition-opacity duration-300 before:absolute before:bottom-0 before:left-0 before:h-2 before:w-full before:bg-gradient-to-r before:from-primary-600 before:to-secondary-600"
                  role="region"
                >
                  <ul class="flex flex-col">
                    {group.children.map((child) => {
                      if (child.type === "separator") {
                        return <li role="separator" class="my-4 h-px w-full bg-primary-500" />;
                      }

                      return (
                        <li>
                          <a
                            href={child.href}
                            class:list={[
                              child.type === "button"
                                ? "btn-quaternary mb-2 w-full"
                                : "link my-2 block",
                            ]}
                          >
                            {child.title}
                          </a>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </li>
            ))
          }

          <li>
            <a
              href="/"
              class:list={[
                "block px-4 py-3 text-xs uppercase transition-colors hover:text-tertiary-400 xl:text-sm",
                transparent
                  ? "text-white group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400"
                  : "text-primary-800",
              ]}
            >
              Give
            </a>
          </li>

          <li>
            <button
              type="button"
              aria-label="show search form"
              aria-expanded="false"
              aria-haspopup="true"
              id="search-form-toggle"
              aria-controls="search-form"
              class:list={[
                "ml-4 mt-1 transition-colors hover:text-tertiary-400",
                transparent
                  ? "group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400 md:text-white"
                  : "text-primary-800",
              ]}
            >
              <Icon name="search" class="pointer-events-none size-4 xl:size-5" />
            </button>
          </li>
        </ul>

        <ul class="flex items-center justify-end gap-4 lg:gap-6">
          {
            bottomGroups.map((group) => (
              <li>
                <button
                  type="button"
                  aria-expanded="false"
                  id={`group-button-${slugify(group.title)}`}
                  aria-controls={`group-${slugify(group.title)}`}
                  aria-haspopup="true"
                  class:list={[
                    "group relative flex items-center gap-x-2 text-sm font-bold transition-colors after:absolute after:left-0 after:right-0 after:top-10 after:h-3 after:bg-transparent after:transition-colors after:duration-300 hover:text-tertiary-400 aria-expanded:after:bg-gray-100 xl:text-lg",
                    transparent
                      ? "text-white group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400"
                      : "text-primary-800",
                  ]}
                >
                  {group.title}

                  <Icon
                    name="chevron-down"
                    class="pointer-events-none size-4 transition-transform group-aria-expanded:rotate-180"
                  />
                </button>

                <div
                  id={`group-${slugify(group.title)}`}
                  class="slate-hidden absolute left-0 z-30 mt-6 w-full bg-gray-100 py-12 opacity-0 transition-opacity duration-300"
                  aria-labelledby={`group-button-${slugify(group.title)}`}
                  aria-hidden="true"
                  role="region"
                >
                  <div class="mx-auto flex max-w-6xl gap-12 px-4">
                    <div class="w-2/5 border-r border-gray-300 pr-12">
                      <p class="mb-4 text-2xl font-bold text-primary-800">{group.description}</p>

                      {group.href ? (
                        <a href={group.href} class="btn-secondary">
                          Start here
                        </a>
                      ) : null}
                    </div>

                    {group.children.map((child) => (
                      <ul class="flex-1 space-y-1 text-sm">
                        {child.map((link) => (
                          <li>
                            <a
                              href={link.href}
                              class:list={[
                                "link",
                                {
                                  "font-title text-xl font-bold uppercase text-primary-800":
                                    link.heading,
                                },
                              ]}
                            >
                              {link.title}
                            </a>
                          </li>
                        ))}
                      </ul>
                    ))}
                  </div>
                </div>
              </li>
            ))
          }
          <li class="slate-hidden group-data-[compress='true']:block">
            <button
              type="button"
              aria-label="show search form"
              aria-expanded="false"
              aria-haspopup="true"
              id="search-form-toggle"
              aria-controls="search-form"
              class:list={[
                "ml-4 mt-1 transition-colors hover:text-tertiary-400",
                transparent
                  ? "group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400 md:text-white"
                  : "text-primary-800",
              ]}
            >
              <Icon name="search" class="pointer-events-none size-5" />
            </button>
          </li>
        </ul>
      </div>
    </nav>
  </header>

  <search
    id="search-form"
    aria-labelledby="search-form-toggle"
    aria-hidden="true"
    class="slate-hidden absolute left-0 right-0 top-0 z-10 bg-primary-800 p-8 text-white opacity-0 transition-opacity duration-300 group-data-[scrolling='true']:translate-y-12"
  >
    <form class="relative mx-auto flex max-w-6xl px-4">
      <input
        type="search"
        class="w-full border border-white/50 bg-transparent px-4 py-2 placeholder:text-white/50"
        placeholder="What are you searching for?"
        name="s"
        autofocus
      />
      <button
        type="submit"
        aria-label="submit search form"
        class="absolute right-4 top-0 flex aspect-square h-full items-center justify-center text-white/50 transition-colors hover:bg-white/50 hover:text-white focus-visible:bg-white/50 focus-visible:text-white"
      >
        <Icon name="search" class="pointer-events-none size-5" />
      </button>
    </form>
  </search>
</div>

<script>
  let menu = document.querySelector<HTMLDivElement>("[data-menu]");

  function hide(button: HTMLButtonElement) {
    let group = menu?.querySelector<HTMLDivElement>(`#${button.getAttribute("aria-controls")}`);

    if (group) {
      group.classList.add("opacity-0");
      button.setAttribute("aria-expanded", "false");
      group.setAttribute("aria-hidden", "true");
      group.addEventListener(
        "transitionend",
        () => {
          group.classList.add("slate-hidden");
        },
        { once: true }
      );
    }
  }

  function show(button: HTMLButtonElement) {
    let group = menu?.querySelector<HTMLDivElement>(`#${button.getAttribute("aria-controls")}`);

    if (group) {
      group.classList.remove("slate-hidden");
      button.setAttribute("aria-expanded", "true");
      group.setAttribute("aria-hidden", "false");

      setTimeout(() => {
        group.classList.remove("opacity-0");
      });
    }
  }
  function hideActive() {
    let active = getActive();

    if (active) {
      hide(active);
      active.focus();
    }
  }

  function handleToggleGroup(button: HTMLButtonElement) {
    if (button.getAttribute("aria-expanded") === "false") {
      hideActive();
      show(button);
    } else {
      hide(button);
    }
  }

  function getActive() {
    return menu?.querySelector<HTMLButtonElement>('button[aria-expanded="true"]');
  }

  function handleClick(event: MouseEvent) {
    let element = event.target as HTMLElement;
    let active = getActive();

    if (element.hasAttribute("aria-controls")) {
      handleToggleGroup(element as HTMLButtonElement);
    }

    if (!element.closest("[data-menu]") && active) {
      hideActive();
    }
  }

  function handleKeyDown(event: KeyboardEvent) {
    if (event.key === "Escape" && getActive()) {
      hideActive();
    }
  }

  function handleScroll() {
    if (window.scrollY > 0) {
      if (menu?.getAttribute("data-scrolling") !== "true") {
        menu?.setAttribute("data-scrolling", "true");
      }
    } else {
      menu?.setAttribute("data-scrolling", "false");
    }
    if (window.scrollY > 450) {
      if (menu?.getAttribute("data-compress") !== "true") {
        menu?.setAttribute("data-compress", "true");
      }
    } else {
      menu?.setAttribute("data-compress", "false");
    }
  }

  document.addEventListener("click", handleClick);
  document.addEventListener("keydown", handleKeyDown);
  document.addEventListener("scroll", handleScroll, { passive: true });

  handleScroll();
</script>
