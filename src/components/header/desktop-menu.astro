---
import Alert from "../alert.astro";
import Icon from "../icon.astro";
import Logo from "../logo.astro";
import { bottomGroups, topGroups } from "./navigation-data";
import SearchForm from "./search-form.astro";

interface Props {
  transparent: boolean;
}

const { transparent } = Astro.props;
---

<Alert />

<div
  class="sticky -top-px before:absolute before:top-0 before:h-2 lg:before:h-4 before:w-full before:bg-gradient-to-r before:from-primary-600 lg:data-[scrolling='true']:bg-white before:to-secondary-600 pt-6 lg:pt-4 pb-2 lg:pb-6 z-30 group border-b border-transparent lg:data-[scrolling='true']:border-gray-300 lg:data-[compress='true']:-translate-y-12 transition-all"
  x-data="{
    scrolling: false,
    compress: false,

    scroll() {
      this.scrolling = window.scrollY > 0;
      this.compress = window.scrollY > 450;
    },
  }"
  x-init="scroll"
  :data-scrolling="scrolling"
  :data-compress="compress"
  x-on:scroll.window="scroll"
>
  <header class="mx-auto max-w-6xl px-4">
    <nav class="flex items-end flex-wrap" data-analytics="navigation">
      <a
        href="/"
        aria-label="home page"
        class:list={[
          "hidden lg:block mr-auto mt-4 group-data-[compress='true']:opacity-0 transition-opacity",
          transparent
            ? "text-white group-data-[scrolling='true']:text-primary-800 transition-colors"
            : "text-primary-800",
        ]}
      >
        <Logo />
      </a>

      <div class="flex-col justify-end transition-opacity grow hidden lg:flex">
        <ul
          x-ref="group"
          class="flex justify-end mb-4 items-center group-data-[compress='true']:opacity-0 transition-opacity leading-none"
        >
          {
            topGroups.map((group) => (
              <li
                class="relative"
                x-data="{
                  open: false,

                  toggle() {
                    this.open = this.open ? this.close() : true;
                  },

                  close(focusAfter) {
                    this.open = false;

                    focusAfter && focusAfter.focus();
                  }
                }"
                x-on:keydown.escape.prevent.stop="close($refs.button)"
                x-on:focusin.window="!$refs.group.contains($event.target) && close()"
                x-id="['group', 'button']"
              >
                <button
                  type="button"
                  x-ref="button"
                  x-on:click="toggle()"
                  :id="$id('button')"
                  :aria-expanded="open"
                  :aria-controls="$id('group')"
                  aria-haspopup="true"
                  class:list={[
                    "hover:text-tertiary-400 aria-expanded:bg-primary-800 aria-expanded:text-white transition-colors px-4 py-3 uppercase group-data-[scrolling='true']:aria-expanded:text-white flex items-center gap-x-2 group text-xs xl:text-sm",
                    transparent
                      ? "text-white group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400"
                      : "text-primary-800",
                  ]}
                >
                  {group.title}

                  <Icon
                    name="chevron-down"
                    class="size-4 pointer-events-none group-aria-expanded:rotate-180 transition-transform"
                  />
                </button>

                <div
                  x-show="open"
                  x-transition.opacity
                  x-ref="group"
                  x-cloak
                  x-on:click.outside="close($refs.button)"
                  :id="$id('group')"
                  :aria-labelledby="$id('button')"
                  class="absolute right-0 w-72 bg-primary-800 text-white transition-opacity duration-300 p-8 z-10 before:absolute before:bottom-0 before:left-0 before:h-2 before:w-full before:bg-gradient-to-r before:from-primary-600 before:to-secondary-600"
                  role="region"
                >
                  <ul class="flex flex-col">
                    {group.children.map((child) => {
                      if (child.type === "separator") {
                        return <li role="separator" class="w-full h-px bg-primary-500 my-4" />;
                      }

                      return (
                        <li>
                          <a
                            href={child.href}
                            class:list={[
                              child.type === "button"
                                ? "btn-quaternary w-full mb-2"
                                : "link my-2 block",
                            ]}
                          >
                            {child.title}
                          </a>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </li>
            ))
          }

          <li>
            <a
              href="/"
              class:list={[
                "uppercase hover:text-tertiary-400 px-4 py-3 block transition-colors text-xs xl:text-sm",
                transparent
                  ? "text-white group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400"
                  : "text-primary-800",
              ]}
            >
              Give
            </a>
          </li>

          <SearchForm transparent={transparent} />
        </ul>


        <ul class="flex gap-4 lg:gap-6 justify-end items-center">
          {
            bottomGroups.map((group) => (
              <li
                x-data="{
                  open: false,

                  toggle() {
                    this.open = this.open ? this.close() : true;
                  },

                  close(focusAfter) {
                    this.open = false;

                    focusAfter && focusAfter.focus();
                  }
                }"
                x-on:keydown.escape.prevent.stop="close($refs.button)"
                x-on:focusin.window="!$refs.group.contains($event.target) && close()"
                x-id="['group', 'button']"
              >
                <button
                  type="button"
                  x-ref="button"
                  x-on:click="toggle()"
                  :id="$id('button')"
                  :aria-expanded="open"
                  :aria-controls="$id('group')"
                  aria-haspopup="true"
                  class:list={[
                    "text-sm group xl:text-lg flex items-center gap-x-2 font-bold hover:text-tertiary-400 aria-expanded:after:bg-gray-100 after:bg-transparent relative after:absolute after:top-10 after:h-3 after:left-0 after:right-0 after:transition-colors after:duration-300 transition-colors",
                    transparent
                      ? "text-white group-data-[scrolling='true']:text-primary-800 group-data-[scrolling='true']:hover:text-tertiary-400"
                      : "text-primary-800",
                  ]}
                >
                  {group.title}

                  <Icon
                    name="chevron-down"
                    class="size-4 group-aria-expanded:rotate-180 pointer-events-none transition-transform"
                  />
                </button>

                <div
                  x-show="open"
                  x-transition.opacity
                  x-ref="group"
                  x-cloak
                  x-on:click.outside="close($refs.button)"
                  :id="$id('group')"
                  :aria-labelledby="$id('button')"
                  class="absolute left-0 mt-6 w-full bg-gray-100 py-12 transition-opacity duration-300 z-30"
                  role="region"
                >
                  <div class="mx-auto flex max-w-6xl gap-12 px-4">
                    <div class="w-2/5 border-r border-gray-300 pr-12">
                      <p class="mb-4 text-2xl font-bold text-primary-800">{group.description}</p>

                      {group.href ? (
                        <a href={group.href} class="btn-secondary">
                          Start here
                        </a>
                      ) : null}
                    </div>

                    {group.children.map((child) => (
                      <ul class="flex-1 space-y-1 text-sm">
                        {child.map((link) => (
                          <li>
                            <a
                              href={link.href}
                              class:list={[
                                "link",
                                {
                                  "text-primary-800 font-title uppercase font-bold text-xl":
                                    link.heading,
                                },
                              ]}
                            >
                              {link.title}
                            </a>
                          </li>
                        ))}
                      </ul>
                    ))}
                  </div>
                </div>
              </li>
            ))
          }

          <SearchForm transparent={transparent} class="hidden group-data-[compress='true']:block" />
        </ul>
      </div>
    </nav>
  </header>
</div>
