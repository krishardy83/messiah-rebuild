---
import { slugify } from "../../lib/utils";
import Icon from "../icon.astro";
import Logo from "../logo.astro";
import { bottomGroups, topGroups } from "./navigation-data";

interface Props {
  transparent: boolean;
}

const { transparent } = Astro.props;
---

<button
  type="button"
  aria-label="open page menu"
  data-mobile-menu-trigger
  aria-expanded="false"
  class="group/trigger lg:slate-hidden fixed right-0 top-12 z-50 h-12 w-12 bg-primary-800 text-white transition-colors aria-expanded:bg-white aria-expanded:text-primary-800"
>
  <span
    aria-hidden="true"
    class="pointer-events-none absolute left-2 right-2 top-4 block h-0.5 bg-current transition-all ease-in-out group-aria-expanded/trigger:top-6 group-aria-expanded/trigger:rotate-[135deg]"
  ></span>
  <span
    aria-hidden="true"
    class="pointer-events-none absolute left-2 right-2 top-6 block h-0.5 bg-current transition-all ease-in-out group-aria-expanded/trigger:-left-16 group-aria-expanded/trigger:opacity-0"
  ></span>
  <span
    aria-hidden="true"
    class="pointer-events-none absolute left-2 right-2 top-8 block h-0.5 bg-current transition-all ease-in-out group-aria-expanded/trigger:top-6 group-aria-expanded/trigger:-rotate-[135deg]"
  ></span>
</button>

<a
  href="/"
  aria-label="home page"
  class:list={[
    "lg:slate-hidden relative z-10 ml-4 mt-2 block transition-opacity",
    transparent ? "text-white" : "text-primary-800",
  ]}
>
  <Logo />
</a>

<div
  class="slate-hidden lg:slate-hidden fixed inset-0 z-40 overflow-y-auto bg-primary-800 px-4 py-10 text-white opacity-0 transition-opacity duration-300"
  data-mobile-menu-content
>
  <Logo />

  <search class="my-4">
    <form class="relative">
      <input
        type="search"
        class="w-full border border-white bg-transparent px-4 py-2 placeholder:text-white"
        placeholder="What are you searching for?"
        name="s"
      />
      <button
        type="submit"
        aria-label="submit search form"
        class="absolute right-0 top-0 flex aspect-square h-full items-center justify-center text-white transition-colors hover:bg-white/50 hover:text-white focus-visible:bg-white/50 focus-visible:text-white"
      >
        <Icon name="search" class="pointer-events-none size-5" />
      </button>
    </form>
  </search>

  <nav data-analytics="navigation">
    <ul>
      {
        bottomGroups.map((group) => (
          <li>
            <button
              type="button"
              aria-expanded="false"
              aria-haspopup="true"
              data-mobile-group-trigger
              id={`mobile-group-button-${slugify(group.title)}`}
              aria-controls={`mobile-group-${slugify(group.title)}`}
              class="group flex w-full items-center justify-between gap-x-2 border-b border-white/50 py-4 text-xl font-bold transition-colors hover:text-tertiary-400"
            >
              {group.title}

              <span class="pointer-events-none relative block size-6 rounded-full bg-white transition-transform duration-300 before:absolute before:left-1/2 before:top-1.5 before:h-3 before:w-0.5 before:-translate-x-1/2 before:bg-primary-800 after:absolute after:left-1.5 after:top-1/2 after:h-0.5 after:w-3 after:-translate-y-1/2 after:bg-primary-800 after:transition-all after:duration-300 group-aria-expanded:rotate-90 group-aria-expanded:after:w-0" />
            </button>

            <div
              id={`mobile-group-${slugify(group.title)}`}
              class="mt-4 h-[--height] overflow-hidden transition-all duration-300"
              role="region"
              aria-labelledby={`mobile-group-button-${slugify(group.title)}`}
              hidden="hidden"
              role="region"
            >
              {group.children.map((child) => (
                <ul class="mb-2 ml-4 flex flex-col gap-2">
                  {child.map((link) => (
                    <li>
                      <a
                        href={link.href}
                        class:list={[
                          "link",
                          {
                            "mt-4 block font-title text-xl font-bold uppercase": link.heading,
                          },
                        ]}
                      >
                        {link.title}
                      </a>
                    </li>
                  ))}
                </ul>
              ))}
            </div>
          </li>
        ))
      }
    </ul>
    <ul class="mt-4 flex flex-col gap-4 sm:flex-row">
      {
        topGroups.map((group) => (
          <li class="border border-tertiary-300 p-4 sm:w-1/2">
            <span class="mb-2 block font-title text-xl font-bold uppercase text-tertiary-300">
              {group.title}
            </span>
            <ul class="mb-2 flex flex-col gap-2">
              {group.children.map((link) => {
                if (link.type === "separator") {
                  return null;
                }

                return (
                  <li>
                    <a href={link.href} class="link">
                      {link.title}
                    </a>
                  </li>
                );
              })}
            </ul>
          </li>
        ))
      }
    </ul>
  </nav>

  <ul class="mt-4 grid grid-cols-2 gap-4">
    <li>
      <a href="https://www.messiah.edu/applytoday" class="btn-quaternary h-full w-full">Apply</a>
    </li>
    <li>
      <a href="https://www.messiah.edu/visit" class="btn-quaternary h-full w-full">Visit</a>
    </li>
    <li>
      <a href="https://www.messiah.edu/request" class="btn-quaternary h-full w-full"
        >Request Information</a
      >
    </li>
    <li>
      <a href="https://www.messiah.edu/give" class="btn-quaternary h-full w-full">Give</a>
    </li>
  </ul>
</div>

<script>
  let content = document.querySelector<HTMLDivElement>("[data-mobile-menu-content]")!;
  let trigger = document.querySelector<HTMLDivElement>("[data-mobile-menu-trigger]")!;
  let open = false;
  let previouslySelected: HTMLElement | null = null;

  function closeMenu() {
    trigger.setAttribute("aria-expanded", "false");
    document.body.classList.remove("overflow-hidden");
    content.classList.add("opacity-0");
    content.addEventListener(
      "transitionend",
      () => {
        content.classList.add("slate-hidden");
      },
      { once: true }
    );
    previouslySelected?.focus();
    open = false;
  }

  function openMenu() {
    previouslySelected = document.activeElement as HTMLElement;
    trigger.setAttribute("aria-expanded", "true");
    document.body.classList.add("overflow-hidden");
    content.classList.remove("slate-hidden");

    setTimeout(() => {
      content.classList.remove("opacity-0");
    });

    open = true;
  }

  function handleToggleGroup(trigger: HTMLElement) {
    let group = content.querySelector<HTMLDivElement>(`#${trigger.getAttribute("aria-controls")}`)!;

    if (trigger.getAttribute("aria-expanded") === "true") {
      group.style.setProperty("--height", group.getAttribute("data-collapsed-height"));
      group.addEventListener(
        "transitionend",
        () => {
          group.removeAttribute("data-collapsed-height");
          group.removeAttribute("style");
          group.setAttribute("hidden", "true");
        },
        { once: true }
      );

      trigger.setAttribute("aria-expanded", "false");
    } else {
      group.setAttribute("data-collapsed-height", group.scrollHeight + "px");
      group.style.setProperty("--height", group.scrollHeight + "px");

      requestAnimationFrame(() => {
        group.style.setProperty("--height", group.scrollHeight + "px");
      });

      group.removeAttribute("hidden");
      trigger.setAttribute("aria-expanded", "true");
    }
  }

  function handleClick(event: MouseEvent) {
    let target = event.target as HTMLElement;

    if (target.hasAttribute("data-mobile-menu-trigger")) {
      if (open) {
        closeMenu();
      } else {
        openMenu();
      }
    }

    if (target.hasAttribute("data-mobile-group-trigger")) {
      handleToggleGroup(target);
    }
  }

  function handleKeyDown(event: KeyboardEvent) {
    if (event.key === "Tab") {
      let focusable = content.querySelectorAll<HTMLElement>(
        'button, input, [role="region"]:not([hidden]) a'
      )!;

      if (event.shiftKey) {
        if (document.activeElement === trigger) {
          event.preventDefault();
          focusable[focusable.length - 1]?.focus();
        }
      } else {
        if (document.activeElement === focusable[focusable.length - 1]) {
          event.preventDefault();
          trigger.focus();
        }
      }
    }

    if (event.key === "Escape" && open) {
      closeMenu();
    }
  }

  document.addEventListener("click", handleClick);
  document.addEventListener("keydown", handleKeyDown);
</script>
