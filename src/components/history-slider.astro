---
import type { HTMLAttributes } from "astro/types";
import { cn } from "../lib/utils";
import Icon from "./icon.astro";

interface Props extends HTMLAttributes<"section"> {
  slides: {
    title: string;
    description: string;
    label: string;
  }[];
}

const { slides, class: className, ...props } = Astro.props;
---

<section
  {...props}
  class={cn(
    "relative bg-[url(/images/founded-bg.jpg)] bg-no-repeat bg-cover max-h-screen h-[50vw] flex items-center",
    className
  )}
>
  <div class="wrapper w-full">
    <div class="bg-primary-800/80 w-full max-w-3xl p-8" data-history-slider>
      {
        slides.map((slide, index) => (
          <div
            id={`slide-${index}`}
            data-slide
            hidden={index === 0 ? undefined : ""}
            class="text-white h-60"
          >
            <h3 class="font-title font-bold text-4xl mb-2">{slide.title}</h3>
            <p>{slide.description}</p>
          </div>
        ))
      }

      <div class="flex items-center gap-4">
        <button type="button" aria-label="previous slide" class="text-white link" data-prev>
          <Icon name="chevron-right" class="size-8 rotate-180 pointer-events-none" />
        </button>
        <button type="button" aria-label="next slide" class="text-white link" data-next>
          <Icon name="chevron-right" class="size-8 pointer-events-none" />
        </button>

        <a href="https://www.messiah.edu/info/20013/our_history" class="btn-tertiary"
          >Read more about our history</a
        >
      </div>
      <nav class="flex mt-8">
        {
          slides.map((slide, index) => (
            <button
              type="button"
              class="flex flex-col flex-1 items-center group relative after:absolute after:h-px after:bg-gray-400 after:w-1/2 after:left-8 after:bottom-2 before:absolute before:h-px before:bg-gray-400 before:w-1/2 before:right-8 before:bottom-2 last-of-type:after:hidden first-of-type:before:hidden"
              data-button={index}
              aria-controls={`slide-${index}`}
              aria-expanded={index === 0 ? true : false}
            >
              <span class="text-white text-sm pointer-events-none opacity-0 group-aria-expanded:opacity-100 transition-opacity">
                {slide.label}
              </span>
              <span
                class={
                  "block mt-1 w-4 h-4 rounded-full group-aria-expanded:bg-white pointer-events-none transition-colors border-2 border-gray-400 group-aria-expanded:border-white"
                }
              />
            </button>
          ))
        }
      </nav>
    </div>
  </div>
</section>

<script>
  let wrapper = document.querySelector<HTMLElement>("[data-history-slider]")!;
  let slides = wrapper.querySelectorAll<HTMLDivElement>("[data-slide]")!;
  let buttons = wrapper.querySelectorAll<HTMLButtonElement>("[data-button]")!;

  let active = 0;

  function iterate() {
    slides.forEach((slide, index) => {
      if (index === active) {
        slide.removeAttribute("hidden");
      } else {
        slide.setAttribute("hidden", "");
      }
    });

    buttons.forEach((button, index) => {
      if (index === active) {
        button.setAttribute("aria-expanded", "true");
      } else {
        button.setAttribute("aria-expanded", "false");
      }
    });
  }

  function handleHistorySliderClick(event: Event) {
    const target = event.target as HTMLElement;

    if (target.hasAttribute("data-next")) {
      active = active === slides.length - 1 ? 0 : active + 1;
      iterate();
    }

    if (target.hasAttribute("data-prev")) {
      active = active === 0 ? slides.length - 1 : active - 1;
      iterate();
    }

    if (target.hasAttribute("data-button")) {
      active = Number(target.getAttribute("data-button"));
      iterate();
    }
  }

  wrapper.addEventListener("click", handleHistorySliderClick);
</script>
