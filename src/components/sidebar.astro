---
import type { HTMLAttributes } from "astro/types";
import Icon from "./icon.astro";
import { cn } from "../lib/utils";

interface Child {
  name: string;
  href: string;
  active?: boolean;
  children?: Child[];
}

interface Props extends HTMLAttributes<"aside"> {
  links: {
    title: string;
    children: Child[];
  }[];
}

const { links, class: className, ...props } = Astro.props;
const supplements = await Astro.slots.render("supplements");
---

<aside
  data-analytics="sidebar"
  class={cn(
    "sidebar mb-6 flex-shrink-0 border-b border-gray-300 md:mb-0 md:w-[270px] md:border-b-0 md:border-r",
    className
  )}
  x-data="{ visible: false }"
  {...props}
>
  <button type="button" class="btn-quaternary w-full md:hidden" @click="visible = !visible">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="size-6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
    </svg>
    <span x-text="visible ? 'Hide navigation' : 'Show navigation'"></span>
  </button>

  <div class="mb-6 mt-4 md:mb-0 md:mt-0" :class="visible ? '' : 'hidden md:block'">
    <div class="flex flex-col gap-1">
      <slot />
    </div>

    {
      links.map((link) => (
        <nav aria-label={link.title}>
          <h2 class="mt-6 mb-2 mx-4 h4 text-primary-800">{link.title}</h2>

          <ul>
            {link.children.map((level1) => (
              <li>
                <a
                  href={level1.href}
                  class:list={[
                    "block py-1 px-4",
                    level1.active ? "bg-primary-800 text-white" : "link",
                  ]}
                >
                  {level1.name}
                </a>

                {level1.children ? (
                  <ul class="ml-8">
                    {level1.children?.map((level2) => (
                      <li class="relative">
                        {level2.active ? (
                          <Icon
                            name="chevron-right"
                            class="size-5 absolute left-0 top-1.5 -translate-x-full"
                          />
                        ) : null}
                        <a href={level2.href} class="link block py-1 px-2">
                          {level2.name}
                        </a>

                        {level2.children ? (
                          <ul class="ml-8">
                            {level2.children?.map((level3) => (
                              <li class="relative">
                                {level3.active ? (
                                  <Icon
                                    name="chevron-right"
                                    class="size-5 absolute left-0 top-1.5 -translate-x-full"
                                  />
                                ) : null}
                                <a href={level3.href} class="link block py-1 px-2">
                                  {level3.name}
                                </a>
                              </li>
                            ))}
                          </ul>
                        ) : null}
                      </li>
                    ))}
                  </ul>
                ) : null}
              </li>
            ))}
          </ul>
        </nav>
      ))
    }

    {
      supplements ? (
        <div class="border border-gray-300 bg-gray-100 md:-mr-px mt-4 p-4">
          <slot name="supplements" />
        </div>
      ) : null
    }
  </div>
</aside>
