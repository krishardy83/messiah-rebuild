---
import type { HTMLAttributes } from "astro/types";
import { cn } from "../lib/utils";

interface Props extends HTMLAttributes<"nav"> {
  value: number;
}

const { value, class: className, ...props } = Astro.props;
---

<div
  x-data="{
    init() {
      this.$nextTick(() => {
        const observer = new IntersectionObserver((entries) => {
          this.$refs.progress.classList.toggle('start-animation', entries[0].isIntersecting);
        });

        observer.observe(this.$refs.progress);
      });
    }
  }"
  class="@container"
  data-analytics="stats"
>
  <div
    class={cn(
      "bg-[url(/images/grad_stats_background.jpg)] bg-cover flex gap-8 p-8 items-center flex-wrap @md:flex-nowrap",
      className
    )}
    {...props}
  >
    <p class="text-white font-bold text-2xl">
      <slot />
    </p>

    <div
      x-ref="progress"
      class="counter relative after:content-[counter(num)_'%'] after:absolute after:left-1/2 after:top-1/2 w-max after:-translate-x-1/2 after:-translate-y-1/2 after:text-5xl after:text-white"
    >
      <svg width="200" height="200" viewBox="0 0 200 200" class="circular-progress">
        <circle class="bg stroke-white"></circle>
        <circle class="fg stroke-tertiary-400 -rotate-90 stroke-2"></circle>
      </svg>
    </div>
  </div>
</div>

<style>
  @property --num {
    syntax: "<integer>";
    initial-value: 0;
    inherits: false;
  }

  @property --progress {
    syntax: "<number>";
    inherits: false;
    initial-value: 0;
  }

  @keyframes counter-animation {
    from {
      --num: 0;
    }
    to {
      --num: 96;
    }
  }

  @keyframes progress-animation {
    from {
      --progress: 0;
    }
    to {
      --progress: 96;
    }
  }
</style>
