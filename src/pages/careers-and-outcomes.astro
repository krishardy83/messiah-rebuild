---
import WithoutHero from "../layouts/without-hero.astro";
---

<WithoutHero
  title="Outcomes - Department of Communication"
  description="Outcomes - Department of Communication"
  breadcrumbs={[
    { name: "Home", href: "/" },
    { name: "Academics", href: "/" },
    { name: "Schools and departments", href: "/" },
    { name: "Department of Communication", href: "/" },
    { name: "Careers and outcomes", href: "/" },
  ]}
  sidebarLinks={[
    {
      title: "Web Services",
      children: [
        { href: "/", name: "FAQ's" },
        { href: "/", name: "Project planning" },
        { href: "/", name: "Services provided" },
        { href: "/", name: "Support & training" },
        { href: "/", name: "Website governance" },
      ],
    },
  ]}
>
  <h2 class="h3">Check out what our grads are up to</h2>

  <div class="rich-text mb-8">
    <p>
      Our graduates have high job placements and acceptance to graduate school rates! We're proud of
      all they accomplish as they live out the mission of Messiah University in their workplaces,
      communities and families. Here is just a small sampling of jobs placements and graduate
      schools for recent graduates.
    </p>
  </div>

  <div
    x-data="{
      programs: [],
      loading: true,
      error: null,

      filters: {
        department: 'communication',
        program: '',
      },

      init() {
        fetch('https://cascade-prod.messiah.edu/_program_data/ug-json.json')
          .then((response) => response.json())
          .then((data) => {
            this.programs = data.items.filter((program) => {
              const hasCorrectDepartment = program.department_id === this.filters.department;
              const hasJobTitles = program.job_title !== '';
              const hasWhereTheyWork = program.where_they_work !== '';
              const hasWhereTheyStudy = program.where_they_study !== '';

              return hasCorrectDepartment && (hasJobTitles || hasWhereTheyWork || hasWhereTheyStudy);
            });
            this.loading = false;
          })
          .catch((error) => {
            this.error = `Could not fetch program data (${error.message})`;
            this.loading = false;
          });
      },

      getFilteredPrograms() {
        return this.programs.filter((program) => {
          if (this.filters.program === '') {
            return true;
          }

          return program.entry_id === this.filters.program;
        });
      },

      getWhereTheyWork() {
        const locations = new Set();

        for (const program of this.getFilteredPrograms()) {
          for (const location of program.where_they_work.split(',')) {
            if (location.trim() !== '') {
              locations.add(location);
            }
          }
        }

        return Array.from(locations).sort();
      },

      getWhatTheyDo() {
        const occupations = new Set();

        for (const program of this.getFilteredPrograms()) {
          for (const occupation of program.job_title.split(',')) {
            if (occupation.trim() !== '') {
              occupations.add(occupation);
            }
          }
        }

        return Array.from(occupations).sort();
      },

      getWhereTheyStudy() {
        const schools = new Set();

        for (const program of this.getFilteredPrograms()) {
          for (const school of program.where_they_study.split(',')) {
            if (school.trim() !== '') {
              schools.add(school);
            }
          }
        }

        return Array.from(schools).sort();
      }
    }"
  >
    <template x-if="loading">
      <div
        role="alert"
        class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
      >
        <p>Loading information, please wait...</p>
      </div>
    </template>

    <template x-if="error">
      <div role="alert" class="text-red-600 border border-red-200 bg-red-50 py-2 px-4">
        <p class="mb-2">Snap! Something went wrong. Please refresh the page or try again later.</p>
        <code x-text="error" class="text-sm leading-none"></code>
      </div>
    </template>

    <template x-if="programs.length > 0">
      <div>
        <div class="flex flex-wrap items-center border border-gray-300 px-4 py-2 gap-2 mb-4">
          <label for="program-filter" class="font-semibold">Filter by program:</label>
          <select
            x-model="filters.program"
            id="program-filter"
            class="w-full md:w-auto bg-gray-100 md:bg-transparent p-2"
          >
            <option value="">View all</option>
            <template x-for="program in programs">
              <option x-text="program.program_name" :value="program.entry_id"></option>
            </template>
          </select>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <h3 class="h4 mb-4">Where they work</h3>
            <ul class="list-disc pl-4">
              <template x-for="entry in getWhereTheyWork()">
                <li x-text="entry"></li>
              </template>
            </ul>
          </div>

          <div>
            <h3 class="h4 mb-4">What they do</h3>

            <ul class="list-disc pl-4">
              <template x-for="entry in getWhatTheyDo()">
                <li x-text="entry"></li>
              </template>
            </ul>
          </div>

          <div>
            <h3 class="h4 mb-4">Where they study</h3>
            <ul class="list-disc pl-4">
              <template x-for="entry in getWhereTheyStudy()">
                <li x-text="entry"></li>
              </template>
            </ul>
          </div>
        </div>
      </div>
    </template>
  </div>
</WithoutHero>
