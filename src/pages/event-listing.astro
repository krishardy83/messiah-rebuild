---
import Icon from "../components/icon.astro";
import WithoutHero from "../layouts/without-hero.astro";
---

<WithoutHero
  title="Event Listing"
  description="Event Listing"
  breadcrumbs={[
    { name: "Home", href: "/" },
    { name: "Campus Directory", href: "/" },
    { name: "Offices", href: "/" },
    { name: "Web Services", href: "/" },
    { name: "Quick Links Example", href: "/" },
  ]}
>
  <div
    class="max-w-7xl py-4 lg:grid lg:grid-cols-3 lg:gap-8"
    x-data="{
      events: [],
      loading: true,
      error: null,

      filtersVisible: false,

      calendar: {
        year: new Date().getFullYear(),
        month: new Date().getMonth() + 1,
      },
      
      filters: {
        category: '',
        calendar: '',
        query: '',
        startDate: null,
        endDate: null,
      },

      init() {
        fetch('https://www.messiah.edu/events/_data/all-events.json')
          .then((response) => response.json())
          .then((data) => {
            this.events = data.items;
            this.loading = false;
          })
          .catch((error) => {
            this.error = `Could not fetch events. (${error.message})`;
            this.loading = false;
          });
      },

      formatDate(date) {
        if (!date) return '';

        const dateString = date.length >= 20 ? date : `${date}T12:00:00Z`;

        return new Intl.DateTimeFormat('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric',
          timeZone: 'UTC'
        }).format(new Date(dateString));
      },

      getDay(date) {
        return Intl.DateTimeFormat('en-US', { day: '2-digit', timeZone: 'UTC' }).format(new Date(date));
      },

      getMonth(date) {
        return Intl.DateTimeFormat('en-US', { month: 'short', timeZone: 'UTC' }).format(new Date(date));
      },

      setDate(dateKey) {
        this.filters.startDate = dateKey;
        this.filters.endDate = null;
      },
  
      setToday() {
        const today = new Date();

        this.filters.startDate = today.toISOString().slice(0, 10);
        this.filters.endDate = null;
      },

      setTomorrow() {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);

        this.filters.startDate = tomorrow.toISOString().slice(0, 10);
        this.filters.endDate = null;
      },

      setThisWeek() {
        const start = new Date();
        start.setDate(start.getDate() - start.getDay());
        
        const end = new Date();
        end.setDate(end.getDate() + (6 - end.getDay()));
        
        this.filters.startDate = start.toISOString().slice(0, 10);
        this.filters.endDate = end.toISOString().slice(0, 10);
      },

      reset() {
        this.filters = {
          category: '',
          calendar: '',
          query: '',
          date: null,
        };
      },

      getEventCountForCategory(category) {
        return this.events.filter((event) => {
          const matchesCategory = event.category.includes(category);
          const matchesCalendar = this.filters.calendar ? event.calendars.includes(this.filters.calendar) : true;
          
          return matchesCategory && matchesCalendar;
        }).length;
      },

      getEventCountForCalendar(calendar) {
        return this.events.filter((event) => {
          const matchesCalendar = event.calendars.includes(calendar);
          const matchesCategory = this.filters.category ? event.category.includes(this.filters.category) : true;

          return matchesCalendar && matchesCategory;
        }).length;
      },

      isEventInRange(event, startDate, endDate = null) {
        const start = startDate ? new Date(`${startDate}T00:00:00Z`) : null;
        const end = endDate ? new Date(`${endDate}T00:00:00Z`) : new Date(`${startDate}T00:00:00Z`);

        if (!start) return true;
        
        const eventStart = new Date(event.date);
        const repeatEnd = event.repeatEnd ? new Date(event.repeatEnd) : null;

        // Normalize to midnight UTC for day-level comparison
        const normalize = d => {
          const n = new Date(d);
          n.setUTCHours(0, 0, 0, 0);
          return n;
        };

        const startDay = normalize(start);
        const endDay = normalize(end);
        const eventDay = normalize(eventStart);

        // Helper: check if two dates are the same day
        const isSameDay = (d1, d2) => d1.getTime() === d2.getTime();

        if (event.repeat === 'No repeat') {
          return eventDay >= startDay && eventDay <= endDay;
        }

        if (event.repeat === 'Daily') {
          // Daily events occur every day from eventStart until repeatEnd
          return (
            // range and recurrence overlap
            endDay >= eventDay &&
            (!repeatEnd || startDay <= repeatEnd)
          );
        }

        if (event.repeat === 'Weekly') {
          // Weekly events: must overlap in range and recurrence window
          if (endDay < eventDay) return false;
          if (repeatEnd && startDay > repeatEnd) return false;

          const dayMap = {
            Sunday: 0,
            Monday: 1,
            Tuesday: 2,
            Wednesday: 3,
            Thursday: 4,
            Friday: 5,
            Saturday: 6
          };
          const repeatDaysNums = event.repeatDays.map(d => dayMap[d]);

          // Check if at least one day in [startDay..endDay] matches
          let current = new Date(startDay);
          while (current <= endDay) {
            if (current >= eventDay && (!repeatEnd || current <= repeatEnd)) {
              if (repeatDaysNums.includes(current.getUTCDay())) {
                return true;
              }
            }
            current.setUTCDate(current.getUTCDate() + 1);
          }
          return false;
        }

        return false;
      },

      transformEventDate(event) {
        const getNow = () => {
          if (this.filters.endDate) {
            return new Date();
          }

          return this.filters.startDate ? new Date(`${this.filters.startDate}T00:00:00Z`) : new Date();
        };

        const now = getNow();
        now.setUTCHours(0, 0, 0, 0); // normalize to day only

        const eventStart = new Date(event.date);
        const repeatEnd = event.repeatEnd ? new Date(event.repeatEnd) : null;

        // Normalize eventStart too
        const eventDay = new Date(eventStart);
        eventDay.setUTCHours(0, 0, 0, 0);

        // No repeat → return event unchanged
        if (event.repeat === 'No repeat') {
          return { ...event };
        }

        // Daily repeat
        if (event.repeat === 'Daily') {
          if (now < eventDay) {
            // hasn't started yet → first date
            return { ...event, date: eventDay.toISOString() };
          }
          if (repeatEnd && now > repeatEnd) {
            return null; // recurrence already ended
          }
          return { ...event, date: now.toISOString() }; // today
        }

        // Weekly repeat
        if (event.repeat === 'Weekly') {
          const dayMap = {
            Sunday: 0,
            Monday: 1,
            Tuesday: 2,
            Wednesday: 3,
            Thursday: 4,
            Friday: 5,
            Saturday: 6
          };
          const repeatDaysNums = event.repeatDays.map(d => dayMap[d]);

          // start searching from today
          let current = new Date(now);

          // Cap search to avoid infinite loops (e.g. missing repeatDays)
          for (let i = 0; i < 14; i++) { // 2 weeks max search
            if (current >= eventDay && (!repeatEnd || current <= repeatEnd)) {
              if (repeatDaysNums.includes(current.getUTCDay())) {
                return { ...event, date: current.toISOString() };
              }
            }
            current.setUTCDate(current.getUTCDate() + 1);
          }
          return event; // no valid occurrence found
        }

        return event;
      },

      get filteredEvents() {
        const query = this.filters.query.toLowerCase();
        const category = this.filters.category;
        const calendar = this.filters.calendar;

        return this.events
          .filter((event) => {
            const matchesTitle = event.title.toLowerCase().includes(query);
            const matchesLocation = event.location.toLowerCase().includes(query);
            const inRange = this.isEventInRange(event, this.filters.startDate, this.filters.endDate);

            const matchesCategory = category ? event.category.includes(category) : true;
            const matchesCalendar = calendar ? event.calendars.includes(calendar) : true;

            return (matchesTitle || matchesLocation) && inRange && matchesCategory && matchesCalendar;
          });
      },

      get currentEvents() {
        return this.filteredEvents
          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
          .map((event) => this.transformEventDate(event));
      },

      get eventCategories() {
        const categories = new Set();
        
        for (const event of this.events) {
          event.category.forEach((category) => {
            if (category) {
              categories.add(category)
            }
          });
        }
        
        return Array.from(categories);
      },

      get eventCalendars() {
        const calendars = new Set();
        
        for (const event of this.events) {
          event.calendars.forEach((calendar) => {
            if (calendar) {
              calendars.add(calendar)
            }
          });
        }
        
        return Array.from(calendars);
      }
  }"
  >
    <div class="lg:col-span-2">
      <template x-if="loading">
        <div
          role="alert"
          class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
        >
          <p>Loading events...</p>
        </div>
      </template>

      <template x-if="error">
        <div role="alert" class="text-red-600 border border-red-200 bg-red-50 py-2 px-4">
          <p class="mb-2">
            Snap! Something went wrong. Please refresh the page or try again later.
          </p>
          <code x-text="error" class="text-sm leading-none"></code>
        </div>
      </template>

      <template x-if="!loading && !error">
        <div class="lg:hidden flex justify-end">
          <button type="button" class="btn-tertiary" @click="filtersVisible = true">
            <Icon name="filters" /> Filter
          </button>
        </div>
      </template>

      <div
        class="flex gap-2 flex-wrap mb-8"
        x-show="filters.category || filters.calendar || filters.query || filters.startDate"
      >
        <div
          x-show="filters.query"
          class="text-sm bg-primary-800 text-white px-2 py-1 inline-flex gap-1 tems-center"
        >
          <b>Search:</b>
          <span x-text="filters.query"></span>
          <button type="button" class="ml-2"
            ><Icon name="close" class="size-5" @click="filters.query = ''" /></button
          >
        </div>
        <div
          x-show="filters.startDate"
          class="text-sm bg-primary-800 text-white px-2 py-1 inline-flex gap-1 tems-center"
        >
          <b>Date:</b>
          <span x-text="formatDate(filters.startDate)"></span>
          <span x-show="filters.endDate">-</span>
          <span x-show="filters.endDate" x-text="formatDate(filters.endDate)"></span>
          <button type="button" class="ml-2"
            ><Icon name="close" class="size-5" @click="filters.startDate = null" /></button
          >
        </div>

        <div
          x-show="filters.category"
          class="text-sm bg-primary-800 text-white px-2 py-1 inline-flex gap-1 tems-center"
        >
          <b>Category:</b>
          <span x-text="filters.category"></span>
          <button type="button" class="ml-2"
            ><Icon name="close" class="size-5" @click="filters.category = ''" /></button
          >
        </div>

        <div
          x-show="filters.calendar"
          class="text-sm bg-primary-800 text-white px-2 py-1 inline-flex gap-1 tems-center"
        >
          <b>Calendar:</b>
          <span x-text="filters.calendar"></span>
          <button type="button" class="ml-2"
            ><Icon name="close" class="size-5" @click="filters.calendar = ''" /></button
          >
        </div>
      </div>

      <template x-if="currentEvents.length > 0 && !loading && !error">
        <div>
          <template x-for="event in currentEvents">
            <article
              class="border-b flex items-start gap-8 border-gray-300 pb-4 mb-4 group relative last-of-type:border-b-0 last-of-type:pb-0 last-of-type:mb-0"
            >
              <div
                class="size-16 mt-1 flex flex-col items-center justify-center bg-primary-800 text-white shrink-0"
              >
                <span class="font-bold text-lg uppercase" x-text="getMonth(event.date)"></span>
                <span class="font-bold text-3xl -mt-1" x-text="getDay(event.date)"></span>
              </div>
              <div>
                <h3 class="font-title font-bold uppercase text-primary-800 text-2xl mb-2">
                  <a
                    :href="event.url"
                    class="after:absolute after:inset-0 @lg:text-lg leading-tight group-hover:text-tertiary-400 transition-colors"
                    x-text="event.title"></a>
                </h3>

                <ul class="text-sm text-gray-600 space-y-1">
                  <template x-if="event.repeat === 'Daily'">
                    <li class="flex items-center">
                      <Icon name="arrow-path" class="size-6 mr-2 flex-shrink-0" />
                      <span x-text="formatDate(event.date) + ' - ' + formatDate(event.repeatEnd)"
                      ></span>
                    </li>
                  </template>
                  <li class="flex items-center">
                    <Icon name="clock" class="size-6 mr-2 flex-shrink-0" />
                    <span
                      x-show="event.repeat !== 'Daily'"
                      x-text="formatDate(event.date) + ','"
                      class="mr-1"></span>
                    <span x-text="event.start"></span>
                    <span x-show="event.end" class="mx-1">-</span>
                    <span x-text="event.end"></span>
                  </li>
                  <li class="flex items-center">
                    <Icon name="marker" class="size-6 mr-2 flex-shrink-0" />
                    <span x-text="event.location"></span>
                  </li>
                  <li class="flex items-center">
                    <Icon name="dollar" class="size-6 mr-2 flex-shrink-0" />
                    <span x-text="event.cost"></span>
                  </li>
                </ul>
              </div>
            </article>
          </template>
        </div>
      </template>

      <template x-if="currentEvents.length === 0 && !loading && !error">
        <div
          role="alert"
          class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
        >
          <p class="mb-2">No events found with your filter preferences.</p>
          <button type="button" class="btn btn-quaternary" @click="reset">Reset all filters</button>
        </div>
      </template>
    </div>

    <aside
      class="lg:block self-start fixed lg:static bg-gray-50 border border-gray-300 h-screen lg:h-auto z-50 lg:z-0 top-0 right-0 w-full sm:w-1/2 py-8 px-8 overflow-auto lg:w-auto lg:p-8"
      :class="filtersVisible ? 'block' : 'hidden'"
    >
      <div class="flex justify-end mb-8 lg:hidden">
        <button type="button" @click="filtersVisible = false">
          <Icon name="close" class="size-8" />
        </button>
      </div>

      <div class="relative mb-8">
        <Icon name="search" class="absolute top-1/2 left-4 size-5 -translate-y-1/2 text-gray-400" />
        <input
          type="search"
          class="border border-gray-300 w-full px-4 pl-12 min-h-12 bg-white"
          placeholder="Search events"
          x-model="filters.query"
        />
      </div>

      <div
        class="mb-8"
        x-data="{
          currentMonth: new Date().getMonth(),
          currentYear: new Date().getFullYear(),

          prev() {
            if (this.currentMonth === 0) {
              this.currentMonth = 11;
              this.currentYear--;
            } else {
              this.currentMonth--;
            }
          },

          next() {
            if (this.currentMonth === 11) {
              this.currentMonth = 0;
              this.currentYear++;
            } else {
              this.currentMonth++;
            }
          },

          getEventDatesForCurrentMonth(date) {
            return this.filteredEvents.some((event) => {
              return this.isEventInRange(event, date);
            });
          },

          get days() {
            const firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay();
            const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();
            const days = [];
            const events = this.getEventDatesForCurrentMonth();

            for (let i = 0; i < firstDay; i++) {
              days.push(null);
            }

            for (let day = 1; day <= daysInMonth; day++) {
              const dateKey = `${this.currentYear}-${String(this.currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

              days.push({
                day,
                dateKey,
                hasEvent: this.getEventDatesForCurrentMonth(dateKey),
              });
            }

            return days;
          },

          get title() {
            return new Date(this.currentYear, this.currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' });
          }
        }"
      >
        <header class="flex items-center justify-between mb-4">
          <button type="button" @click="prev" aria-label="Go to previous month">
            <Icon name="chevron-right" class="size-6 rotate-180" />
          </button>

          <span x-text="title" class="font-title font-bold uppercase text-primary-800 text-xl"
          ></span>

          <button type="button" @click="next" aria-label="Go to next month">
            <Icon name="chevron-right" class="size-6" />
          </button>
        </header>

        <div
          class="grid grid-cols-7 gap-px font-title font-bold uppercase text-center border-y border-gray-300"
        >
          <div class="py-2">Sun</div>
          <div class="py-2">Mon</div>
          <div class="py-2">Tue</div>
          <div class="py-2">Wed</div>
          <div class="py-2">Thu</div>
          <div class="py-2">Fri</div>
          <div class="py-2">Sat</div>
        </div>
        <div class="grid grid-cols-7 gap-px">
          <template x-for="day in days">
            <div class="aspect-square">
              <template x-if="day !== null">
                <button
                  type="button"
                  class="relative flex items-center justify-center w-full h-full hover:bg-gray-200"
                  :class="day.hasEvent ? 'bg-tertiary-100' : ''"
                  @click="setDate(day.dateKey)"
                >
                  <span x-text="day.day"></span>
                  <span
                    x-show="day.hasEvent"
                    class="bg-primary-800 block size-2 rounded-full absolute top-1 right-1"></span>
                </button>
              </template>

              <template x-if="day === null">
                <div></div>
              </template>
            </div>
          </template>
        </div>
      </div>

      <h4 class="h4 border-b border-gray-300 mb-4">Views</h4>
      <ul class="mb-8 space-y-1">
        <li><button type="button" @click="setToday">Today</button></li>
        <li><button type="button" @click="setTomorrow">Tomorrow</button></li>
        <li><button type="button" @click="setThisWeek">This week</button></li>
      </ul>

      <h4 class="h4 border-b border-gray-300 mb-4">Event categories</h4>
      <template x-if="loading">
        <div
          role="alert"
          class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
        >
          <p>Loading event categories...</p>
        </div>
      </template>

      <ul class="mb-8 space-y-1">
        <template x-for="category in eventCategories">
          <li>
            <button
              type="button"
              class="link flex justify-between w-full items-center text-left gap-2"
              @click="filters.category = category"
            >
              <span x-text="category"></span>
              <span
                x-text="getEventCountForCategory(category)"
                class="bg-tertiary-100 size-6 flex items-center justify-center font-bold font-title shrink-0"
              ></span>
            </button>
          </li>
        </template>
      </ul>

      <h4 class="h4 border-b border-gray-300 mb-4">Event calendars</h4>
      <template x-if="loading">
        <div
          role="alert"
          class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
        >
          <p>Loading event calendars...</p>
        </div>
      </template>

      <ul class="mb-8 space-y-1">
        <template x-for="calendar in eventCalendars">
          <li>
            <button
              type="button"
              class="link flex justify-between w-full items-center text-left gap-2"
              @click="filters.calendar = calendar"
            >
              <span x-text="calendar"></span>
              <span
                x-text="getEventCountForCalendar(calendar)"
                class="bg-tertiary-100 size-6 flex items-center justify-center font-bold font-title shrink-0"
              ></span>
            </button>
          </li>
        </template>
      </ul>

      <h4 class="h4 border-b border-gray-300 mb-4">Other calendars</h4>
      <ul class="space-y-1">
        <li>
          <a href="https://www.messiah.edu/academic-calendars/" class="link"> Academic Calendar </a>
        </li>
        <li>
          <a href="https://gomessiah.com/calendar" class="link"> Athletic Calendar </a>
        </li>
      </ul>
    </aside>
  </div>
</WithoutHero>
