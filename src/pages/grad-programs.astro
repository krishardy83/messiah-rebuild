---
import Icon from "../components/icon.astro";
import WithoutHero from "../layouts/without-hero.astro";
---

<WithoutHero
  title="Degrees and certificates"
  description="Degrees and certificates"
  breadcrumbs={[
    { name: "Home", href: "/" },
    { name: "Academics", href: "/" },
    { name: "Degrees and certificates", href: "/" },
  ]}
>
  <h2 class="h3">Business and leadership master's degrees and certificates</h2>

  <div class="rich-text mb-8">
    <p>
      Messiah University offers a range of advanced business and leadership degrees and certificates
      with unique concentrations. All of our programs are online and made to fit your busy
      lifestyle.
    </p>
  </div>

  <div
    x-data="{
      programs: [],
      loading: true,
      error: null,
      filters: {
        type: '',
        format: '',
        id: 'Education',
      },

      types: [
        {
          key: 'C',
          label:'Concentration',
          color: '#273d5e',
          description: 'A degree track or concentration is a prescribed set of courses in a sub-discipline, or closely related discipline, of a program. Minimum 9 credits, maximum 45 credits.',
        },
        {
          key: 'T',
          label: 'Track',
          color: '#4d87a9',
          description: 'A degree track or concentration is a prescribed set of courses in a sub-discipline, or closely related discipline, of a program. Minimum 9 credits, maximum 45 credits.',
        },
        {
          key: 'P',
          label: 'Pa Teaching Certification',
          color: '#ab4e42',
          description: 'A certification granted by the Pennsylvania Department of Education upon program completion.',
        },
        {
          key: 'G',
          label: 'Graduate Certificate',
          color: '#7477b8',
          description: 'This certificate is for students who have a bachelors degree but would like to earn graduate level credits within a specialty area or discipline. Minimum 12 credits.',
        },
        {
          key: 'N',
          label: 'Non-Degree',
          color: '#84ab8b',
          description: 'Graduate level coursework taken for personal enrichment or professional development, not as part of a degree or certificate program.',
        },
        {
          key: 'A',
          label: 'Certificate in Advanced Graduate Studies',
          color: '#e37b65',
          description: 'A CAGS is for students who have a masters degree and would like to earn additional credits for a specialty area or certification and/or licensure requirements. Minimum 12 credits.',
        }
      ],

      formats: [
        {
          key: 'O',
          label: 'Online',
          description: 'All coursework is fully online; there are no requirements for face-to-face sessions.',
          icon: `<svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-5'><path stroke-linecap='round' stroke-linejoin='round' d='M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25'/></svg>`
        },
        {
          key: 'C',
          label: 'Campus',
          description: 'Traditional students meet at a physical location during scheduled meeting times for the duration of the course.',
          icon: `<svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-5'><path stroke-linecap='round' stroke-linejoin='round' d='M12 21v-8.25M15.75 21v-8.25M8.25 21v-8.25M3 9l9-6 9 6m-1.5 12V10.332A48.36 48.36 0 0 0 12 9.75c-2.551 0-5.056.2-7.5.582V21M3 21h18M12 6.75h.008v.008H12V6.75Z'/></svg>`
        },
        {
          key: 'H',
          label: 'Hybrid',
          description: 'A hybrid program combines traditional face-to-face and online class sessions.',
          icon: `<svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-5'><path stroke-linecap='round' stroke-linejoin='round' d='M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0 0 12 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52 2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 0 1-2.031.352 5.988 5.988 0 0 1-2.031-.352c-.483-.174-.711-.703-.59-1.202L18.75 4.971Zm-16.5.52c.99-.203 1.99-.377 3-.52m0 0 2.62 10.726c.122.499-.106 1.028-.589 1.202a5.989 5.989 0 0 1-2.031.352 5.989 5.989 0 0 1-2.031-.352c-.483-.174-.711-.703-.59-1.202L5.25 4.971Z'/></svg>`
        },
      ],

      hasType(program, type) {
        if (program === null) {
          return false;
        }

        return program.type === type;
      },

      getProgramURL(program) {
        if (!program) {
          return null;
        }

        const url = new URL(location.origin);
        url.pathname = program.program_url;

        return url.toString();
      },

      getRelatedPrograms(program) {
        if (!program) {
          return [];
        }

        const related = program.related_programs.split('|');

        if (related.length === 0) {
          return [];
        }

        return related.map((program) => {
          return this.programs.find((p) => p.entry_id === program);
        });
      },

      init() {
        fetch('https://cascade-prod.messiah.edu/_program_data/grad-json.json')
          .then((response) => response.json())
          .then((data) => {
            this.programs = data.items.filter((program) => program.subject_area === this.filters.id);
            this.loading = false;
          })
          .catch((error) => {
            this.error = `Could not fetch program data (${error.message})`;
            this.loading = false;
          });
      },

      reset() {
        this.filters.type = '';
        this.filters.format = '';
      },

      get transformedPrograms() {
        const parents = {};
        const children = {};

        this.programs.forEach((program) => {
          if (program.parent_program) {
            program.is_child = true;

            if (!children[program.parent_program]) {
              children[program.parent_program] = [];
            }

            children[program.parent_program].push(program);
          } else {
            program.is_child = false;
            parents[program.entry_id] = program;
          }
        });

        const sortedParentIds = Object.keys(parents).sort((a, b) =>
          parents[a].program_name.localeCompare(parents[b].program_name)
        );

        const result = [];

        sortedParentIds.forEach(parentId => {
          result.push(parents[parentId]);

          if (children[parentId]) {
            const sortedChildren = children[parentId].sort((a, b) =>
              a.program_name.localeCompare(b.program_name)
            );

            result.push(...sortedChildren);
          }
        });

        return result;
      },

      getFilteredPrograms() {
        return this.transformedPrograms.filter((program) => {
          const matchesType = this.filters.type === '' || program.type === this.filters.type;
          const matchesFormat = this.filters.format === '' || program.format === this.filters.format;

          return matchesType && matchesFormat;
        });
      },

      getDegreePrograms() {
        return this.getFilteredPrograms().filter((program) => {
          return program.type !== 'Graduate Certificate' && program.type !== 'Pa Teaching Certification';
        });
      },

      getGraduateCertificates() {
        return this.getFilteredPrograms().filter((program) => {
          return program.type === 'Graduate Certificate';
        });
      },

      getPdeCertificates() {
        return this.getFilteredPrograms().filter((program) => {
          return program.type === 'Pa Teaching Certification';
        });
      },

      getProgramFormat(program) {
        return this.formats.find((format) => format.label === program.format);
      },
    }"
  >
    <div class="flex gap-x-8 gap-y-2 mb-8 flex-wrap">
      <template x-for="type in types">
        <label
          class="text-xs flex items-center gap-2 cursor-pointer group has-[:focus-within]:outline"
        >
          <input type="radio" :value="type.label" x-model="filters.type" class="sr-only" />
          <span
            x-text="type.key"
            class="w-5 h-5 text-white rounded-full flex items-center justify-center"
            :style="`background-color: ${type.color}`"></span>
          <span
            x-text="type.label"
            class="uppercase group-hover:underline"
            :class="filters.type === type.label ? 'text-primary-400' : ''"></span>
        </label>
      </template>
    </div>

    <div class="flex gap-x-8 gap-y-2 mb-8 flex-wrap">
      <template x-for="format in formats">
        <label
          class="text-xs flex items-center gap-2 cursor-pointer group has-[:focus-within]:outline"
        >
          <input type="radio" :value="format.label" x-model="filters.format" class="sr-only" />
          <span x-html="format.icon"></span>
          <span
            x-text="format.label"
            class="uppercase group-hover:underline"
            :class="filters.format === format.label ? 'text-primary-400' : ''"></span>
        </label>
      </template>
    </div>

    <template x-if="loading">
      <div
        role="alert"
        class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
      >
        <p>Loading program list...</p>
      </div>
    </template>

    <template x-if="error">
      <div role="alert" class="text-red-600 border border-red-200 bg-red-50 py-2 px-4">
        <p class="mb-2">Snap! Something went wrong. Please refresh the page or try again later.</p>
        <code x-text="error" class="text-sm leading-none"></code>
      </div>
    </template>

    <div x-show="!loading && !error">
      <h3 class="h3 mb-4">Degree programs</h3>

      <template x-if="getDegreePrograms().length === 0 && !loading && !error">
        <div
          role="alert"
          class="bg-tertiary-100 border border-tertiary-200 text-tertiary-800 px-4 py-2"
        >
          <p class="mb-4">No degree programs match the selected program type.</p>

          <button type="button" @click="reset()" class="btn btn-quaternary">Reset</button>
        </div>
      </template>

      <table class="text-sm w-full" x-show="getDegreePrograms().length > 0 && !error && !loading">
        <thead x-show="!filters.query">
          <tr class="border-b border-b-gray-300 bg-gray-100">
            <td colspan="8" class="py-2 px-4 relative"
              >* click an icon above to filter the list
              <button
                type="button"
                @click="reset()"
                x-show="filters.type !== ''"
                class="absolute top-0 right-0 flex items-center gap-2 h-full px-4 hover:bg-gray-200 transition-colors"
              >
                <Icon name="close" class="size-5" />
                Reset filter</button
              >
            </td>
          </tr>
        </thead>
        <tbody class="scroll-m-28">
          <template x-for="program in getDegreePrograms()">
            <tr class="border-b border-b-gray-200 hover:bg-gray-100 transition-colors scroll-m-28">
              <td class="p-2" :class="program.is_child ? 'pl-8' : ''">
                <a
                  x-text="program.program_name"
                  class="text-primary-800 hover:underline mr-2"
                  :href="getProgramURL(program)"></a>

                <span
                  x-text="program.degree_short"
                  x-show="program.degree_short"
                  class="px-1 bg-gray-200 rounded-md uppercase border border-gray-300"></span>
              </td>

              <td>
                <button
                  x-data
                  @click="$tooltip(`<b class='block mb-2 font-title uppercase text-lg'>${getProgramFormat(program).label}</b>${getProgramFormat(program).description}`)"
                  x-html="getProgramFormat(program).icon"
                  class="flex"></button>
              </td>

              <template x-for="type in types">
                <td class="w-8">
                  <button
                    x-data
                    @click="$tooltip(`<b class='block mb-2 font-title uppercase text-lg'>${type.label}</b>${type.description}`)"
                    x-show="hasType(program, type.label)"
                    x-text="type.key"
                    class="w-5 h-5 text-white rounded-full flex items-center justify-center"
                    :style="`background-color: ${type.color}`"></button>
                </td>
              </template>
            </tr>
          </template>
        </tbody>
      </table>

      <div x-show="getPdeCertificates().length > 0">
        <h3 class="h3 mb-4 mt-8">PDE certification</h3>

        <table
          class="text-sm w-full border-t border-gray-200"
          x-show="getPdeCertificates().length > 0 && !error && !loading"
        >
          <tbody class="scroll-m-28">
            <template x-for="program in getPdeCertificates()">
              <tr
                class="border-b border-b-gray-200 hover:bg-gray-100 transition-colors scroll-m-28"
              >
                <td class="p-2" :class="program.is_child ? 'pl-8' : ''">
                  <a
                    x-text="program.program_name"
                    class="text-primary-800 hover:underline mr-2"
                    :href="getProgramURL(program)"></a>

                  <span
                    x-text="program.degree_short"
                    x-show="program.degree_short"
                    class="px-1 bg-gray-200 rounded-md uppercase border border-gray-300"></span>
                </td>

                <td>
                  <button
                    x-data
                    @click="$tooltip(`<b class='block mb-2 font-title uppercase text-lg'>${getProgramFormat(program).label}</b>${getProgramFormat(program).description}`)"
                    x-html="getProgramFormat(program).icon"
                    class="flex"></button>
                </td>

                <template x-for="type in types">
                  <td class="w-8">
                    <button
                      x-data
                      @click="$tooltip(`<b class='block mb-2 font-title uppercase text-lg'>${type.label}</b>${type.description}`)"
                      x-show="hasType(program, type.label)"
                      x-text="type.key"
                      class="w-5 h-5 text-white rounded-full flex items-center justify-center"
                      :style="`background-color: ${type.color}`"></button>
                  </td>
                </template>
              </tr>
            </template>
          </tbody>
        </table>
      </div>

      <div x-show="getGraduateCertificates().length > 0">
        <h3 class="h3 mb-4 mt-8">Graduate certificates</h3>

        <table
          class="text-sm w-full border-t border-gray-200"
          x-show="getGraduateCertificates().length > 0 && !error && !loading"
        >
          <tbody class="scroll-m-28">
            <template x-for="program in getGraduateCertificates()">
              <tr
                class="border-b border-b-gray-200 hover:bg-gray-100 transition-colors scroll-m-28"
              >
                <td class="p-2" :class="program.is_child ? 'pl-8' : ''">
                  <a
                    x-text="program.program_name"
                    class="text-primary-800 hover:underline mr-2"
                    :href="getProgramURL(program)"></a>

                  <span
                    x-text="program.degree_short"
                    x-show="program.degree_short"
                    class="px-1 bg-gray-200 rounded-md uppercase border border-gray-300"></span>
                </td>

                <td>
                  <button
                    x-data
                    @click="$tooltip(`<b class='block mb-2 font-title uppercase text-lg'>${getProgramFormat(program).label}</b>${getProgramFormat(program).description}`)"
                    x-html="getProgramFormat(program).icon"
                    class="flex"></button>
                </td>

                <template x-for="type in types">
                  <td class="w-8">
                    <button
                      x-data
                      @click="$tooltip(`<b class='block mb-2 font-title uppercase text-lg'>${type.label}</b>${type.description}`)"
                      x-show="hasType(program, type.label)"
                      x-text="type.key"
                      class="w-5 h-5 text-white rounded-full flex items-center justify-center"
                      :style="`background-color: ${type.color}`"></button>
                  </td>
                </template>
              </tr>
            </template>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</WithoutHero>
