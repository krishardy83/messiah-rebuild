---
import Icon from "../../components/icon.astro";
---

<div
  x-data="{
    entries: [],
    isDialogVisible: false,
    selected: 'Scholarships',
    activeEntry: null,

    filters: [
      {
        id: 'scholarships',
        label: 'Scholarships',
        icon: 'https://www.messiah.edu/site/custom_scripts/styles/img/grants-and-scholarships/graduation-cap-new.svg',
      },
      {
        id: 'grants',
        label: 'Grants',
        icon: 'https://www.messiah.edu/site/custom_scripts/styles/img/grants-and-scholarships/grants-new.svg',
        description:
          'The grants listed below are available to U.S. citizens and permanent residents only.',
      },
      {
        id: 'federal-loans',
        label: 'Federal Loans',
        icon: 'https://www.messiah.edu/site/custom_scripts/styles/img/grants-and-scholarships/fel-loan-new.svg',
      },
      {
        id: 'other-assistance',
        label: 'Other Assistance',
        icon: 'https://www.messiah.edu/site/custom_scripts/styles/img/grants-and-scholarships/hand-shake.svg',
      },
      {
        id: null,
        label: 'All Aid',
        description: 'The grants listed below are available to U.S. citizens and permanent residents only.',
      }
    ],

    init() {
      fetch('https://cascade-prod.messiah.edu/fin-aid/_data/fin-aid-options.json')
        .then((response) => response.json())
        .then((data) => {
          this.entries = data.listing_data
            .map((entry) => {
              const filter = this.filters.find((filter) => filter.id === this.slugify(entry.category));

              return { ...entry, icon: filter?.icon || null };
            })
            .sort((a, b) => {
              const hasPriorityA = a.priority !== undefined && a.priority !== null && a.priority !== '';
              const hasPriorityB = b.priority !== undefined && b.priority !== null && b.priority !== '';

              if (hasPriorityA && hasPriorityB) {
                // Both have priorities → sort by priority (desc), then by name (asc)
                const diff = Number(b.priority) - Number(a.priority);
                if (diff !== 0) return diff;
                return a.entry_name.localeCompare(b.entry_name);
              }

              if (hasPriorityA) return -1; // A has priority, B does not → A first
              if (hasPriorityB) return 1;  // B has priority, A does not → B first

              // Neither has priority → sort alphabetically
              return a.entry_name.localeCompare(b.entry_name);
            });

          const hash = location.hash.slice(1);
          const url = new URL(location.href);
          const modal = url.searchParams.get('modal');
          const entry = this.getEntryById(modal);

          if (entry) {
            this.isDialogVisible = true;
            this.activeEntry = entry;
          }

          this.select(hash || 'scholarships');
        });
    },

    slugify(str) {
      return str
        .trim()
        .toLowerCase()
        .replaceAll(' ', '-');
    },

    filteredEntries() {
      if (!this.selected) {
        return this.entries;
      }

      return this.entries.filter((entry) => {
        return this.slugify(entry.category) === this.selected
      });
    },

    description() {
      const active = this.filters.find((filter) => filter.id === this.selected);

      return active?.description;
    },

    isInViewport(el) {
      const rect = el.getBoundingClientRect();

      return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
      );
    },

    getEntryById(id) {
      return this.entries.find((entry) => {
        return this.slugify(entry.entry_name) === id;
      });
    },

    getStudentTypes(activeEntry) {
      if (!activeEntry.studentTypes) {
        return null;
      }

      const studentTypes = activeEntry.studentTypes.split('|');
      let result = '';

      if (studentTypes.length === 1) {
        return studentTypes[0];
      }

      for (let i = 0; i < studentTypes.length; i++) {
        if (i === 0) {
          result += studentTypes[i];
        } else if (i === studentTypes.length - 1) {
          result += `, and ${studentTypes[i]}`;
        } else {
          result += `, ${studentTypes[i]}`;
        }
      }

      return result;
    },

    isMobileView() {
      return window.matchMedia('(max-width: 768px)').matches;
    },

    select(filterId) {
      this.selected = filterId;

      if (!this.isInViewport(this.$refs.panels) && this.isMobileView()) {
        this.$refs.panels.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }
  }"
  class="wrapper"
  x-effect="document.body.classList.toggle('overflow-hidden', isDialogVisible)"
>
  <div class="flex flex-col md:flex-row flex-wrap border-b border-gray-300">
    <template x-for="filter in filters">
      <button
        type="button"
        role="switch"
        :aria-selected="selected === filter.id"
        class="text-primary-800 font-sans flex p-4 items-center text-lg md:text-xl gap-4 border-b-4 whitespace-nowrap flex-1 justify-center"
        @click="select(filter.id)"
        :class="selected === filter.id ? 'border-tertiary-400' : 'border-white'"
      >
        <template x-if="filter.icon">
          <img :src="filter.icon" alt="" aria-hidden="true" width="32" height="32" />
        </template>
        <span x-text="filter.label"></span>
      </button>
    </template>
  </div>

  <div x-ref="panels">
    <template x-if="description">
      <p class="text-center mt-8" x-text="description"></p>
    </template>

    <ul class="mt-8 scroll-m-16" id="aid-entries">
      <template x-for="entry in filteredEntries">
        <li class="border-b border-gray-300 last-of-type:border-b-0">
          <button
            type="button"
            @click="isDialogVisible = true; activeEntry = entry"
            class="flex items-center text-left gap-4 p-4 transition-colors hover:bg-gray-100 w-full"
          >
            <img :src="entry.icon" alt="" aria-hidden="true" width="32" height="32" />
            <span x-text="entry.entry_name"></span>
            <Icon name="chevron-right" class="ml-auto" />
          </button>
        </li>
      </template>
    </ul>
  </div>

  <dialog
    :open="isDialogVisible"
    x-show="isDialogVisible"
    x-cloak
    x-id="['modal-title']"
    x-transition.opacity
    @keyup.escape.prevent.stop="isDialogVisible = false"
    :aria-labelledby="$id('modal-title')"
    class="flex fixed z-30 inset-0 w-full h-full bg-tertiary-800/50 justify-end"
  >
    <div
      class="max-w-3xl w-full bg-white py-20 relative overflow-y-auto"
      x-trap.noscroll.inert="isDialogVisible"
    >
      <button
        type="button"
        class="absolute left-4 lg:left-auto lg:right-4 top-5 hover:text-tertiary-400 transition-colors"
        aria-label="close dialog"
        @click="isDialogVisible = false"
      >
        <Icon name="close" class="size-10" />
      </button>

      <template x-if="activeEntry">
        <div class="py-4 px-8">
          <header class="mb-8">
            <div class="flex gap-4 items-center mb-2">
              <img :src="activeEntry.icon" alt="" aria-hidden="true" width="32" height="32" />
              <h3
                :id="$id('modal-title')"
                x-text="activeEntry.entry_name"
                class="font-title text-2xl md:text-3xl lg:text-4xl text-primary-800"
              >
              </h3>
            </div>

            <template x-if="activeEntry.studentTypes">
              <p class="ml-12">
                This scholarship is for <span
                  class="font-bold"
                  x-text="getStudentTypes(activeEntry)"></span>
              </p>
            </template>
          </header>

          <div x-html="activeEntry.description" class="prose"></div>

          <template x-if="activeEntry.read_more_link">
            <a class="btn btn-primary mt-8" :href="activeEntry.read_more_link">Read more</a>
          </template>
        </div>
      </template>
    </div>
  </dialog>
</div>
